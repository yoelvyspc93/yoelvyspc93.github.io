name: Deploy Next.js site to Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    environment: github-pages # <— Debe coincidir EXACTO con tu Environment
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      # Cargar automáticamente variables NEXT_PUBLIC_* desde el Environment y del repo
      - name: Load NEXT_PUBLIC_* variables
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENV_NAME: github-pages
        run: |
          set -e
          REPO="${{ github.repository }}"
          REPO_ID=$(gh api repos/$REPO --jq '.id')

          # Environment-level variables
          gh api "/repositories/$REPO_ID/environments/$ENV_NAME/variables" \
            -q '.variables[] | "\(.name)=\(.value)"' | grep '^NEXT_PUBLIC_' >> $GITHUB_ENV || true

          # Repo-level variables
          gh api "/repos/$REPO/actions/variables" \
            -q '.variables[] | "\(.name)=\(.value)"' | grep '^NEXT_PUBLIC_' >> $GITHUB_ENV || true

      # Debug: imprime lo que se cargó
      - name: Debug NEXT_PUBLIC_*
        run: |
          echo "==== NEXT_PUBLIC_* available at build ===="
          printenv | sort | grep '^NEXT_PUBLIC_' || true

      # (Opcional pero útil) también escribir .env.production
      - name: Write .env.production
        run: |
          : > .env.production
          printenv | grep '^NEXT_PUBLIC_' >> .env.production || true
          echo "Wrote .env.production with $(wc -l .env.production | awk '{print $1}') entries"

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build

      - name: Ensure ./out exists
        run: |
          test -d ./out || (echo "❌ No existe ./out. ¿Tienes output: 'export' en next.config.*?" && exit 1)

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
