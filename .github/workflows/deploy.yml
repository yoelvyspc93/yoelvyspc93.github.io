# .github/workflows/deploy.yml
name: Deploy Next.js site to Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read # ← necesario para listar repo/env variables vía API

concurrency:
  group: 'pages'
  cancel-in-progress: false

env:
  ENVIRONMENT_NAME: github-pages # ← nombre exacto del Environment

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ env.ENVIRONMENT_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      # Carga automática de TODAS las variables que comienzan con NEXT_PUBLIC_
      # desde Variables del repo y Variables del Environment.
      - name: Load NEXT_PUBLIC_* from repo/env variables
        id: load-public-vars
        uses: actions/github-script@v7
        with:
          script: |
            const { writeFileSync } = require('fs');
            const envName = process.env.ENVIRONMENT_NAME;

            // Repo-level variables
            const repoVars = await github.request('GET /repos/{owner}/{repo}/actions/variables', {
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // Environment-level variables
            const repoId = context.payload.repository.id;
            let envVars = { data: { variables: [] } };
            try {
              envVars = await github.request('GET /repositories/{repository_id}/environments/{environment_name}/variables', {
                repository_id: repoId,
                environment_name: envName
              });
            } catch (e) {
              core.info(`Env variables fetch skipped: ${e.status || ''}`);
            }

            // Merge & filter by NEXT_PUBLIC_
            const all = [...repoVars.data.variables, ...envVars.data.variables];
            const seen = new Set();
            const filtered = all.filter(v => v.name.startsWith('NEXT_PUBLIC_') && !seen.has(v.name) && seen.add(v.name));

            // Export to job env and compose .env.production
            let lines = '';
            for (const v of filtered) {
              core.exportVariable(v.name, v.value);
              lines += `${v.name}=${v.value}\n`;
            }
            writeFileSync('.env.production', lines, { encoding: 'utf8' });

            core.info(`Exported ${filtered.length} NEXT_PUBLIC_* variables.`);
            core.setOutput('count', String(filtered.length));

      - name: Debug NEXT_PUBLIC_* variables
        run: |
          echo "=== NEXT_PUBLIC_* en build ==="
          printenv | sort | grep '^NEXT_PUBLIC_' || echo "❌ Vacío"
          echo "=== .env.production ==="
          test -f .env.production && cat .env.production || echo "No .env.production"

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build

      - name: Ensure ./out exists
        run: |
          test -d ./out || (echo "❌ Falta ./out. Revisa next.config.mjs (output: 'export')." && exit 1)

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: ${{ env.ENVIRONMENT_NAME }}
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
